name: ML Auto-Test

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths-ignore:
      - README.md

jobs:
  run_tests:
    if: github.actor != 'github-actions'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OP_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all tags
        run: git fetch --tags

      # - name: Read base version and generate tag
      #   id: tag
      #   run: |
      #     BASE_VERSION="v$(cat VERSION.txt)-pre"
      #     DATE=$(date +'%Y%m%d')
      #     COUNT=$(git tag --list "${BASE_VERSION}-${DATE}-*" | wc -l)
      #     NEW_TAG="${BASE_VERSION}-${DATE}-$(printf "%03d" $((COUNT + 1)))"
      #     echo "Generated tag: $NEW_TAG"
      #     echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      # - name: Create and push tag
      #   run: |
      #     git tag ${{ steps.tag.outputs.new_tag }}
      #     git push origin ${{ steps.tag.outputs.new_tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage pytest flake8 isort black pylint

      - name: Run format
        run: make format

      - name: Run lint
        run: make lint

      - name: Download NLTK data
        run: |
          python -m nltk.downloader stopwords wordnet omw-1.4

      - name: Download dataset
        run: python -m model_training.dataset

      - name: Run tests with coverage (detailed output)
        run: |
          echo "Running unit tests..."
          export PYTHONPATH=$(pwd):$PYTHONPATH
          coverage run --rcfile=.coveragerc -m pytest -v --tb=short --durations=10 tests | tee test_output.txt

          echo "Running metamorphic robustness test..."
          coverage run --rcfile=.coveragerc --append tests/test_metamorphic.py \
            --input data/processed/a1_RestaurantReviews_HistoricDump.tsv \
            --model-version test_model_dev \
            | tee metamorphic_output.txt

          coverage report --rcfile=.coveragerc -m > coverage.txt

      - name: Show coverage summary
        run: coverage report --rcfile=.coveragerc -m
      
      - name: Debug check for metrics.json
        run: |
          echo "Current directory: $(pwd)"
          ls -lah
          cat $GITHUB_WORKSPACE/metrics.json || echo "metrics.json not found!"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract and update coverage
        run: |
          COVERAGE=$(tail -n1 coverage.txt | awk '{print $NF}')
          echo "Coverage: ${COVERAGE}"
          sed -i "s|<!-- COVERAGE -->.*|<!-- COVERAGE --> Coverage: ${COVERAGE}|" README.md
    
      - name: Extract test adequacy info and update README with badges
        run: |
          # Remove old section
          sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/d' README.md

          echo "<!-- METRICS START -->" >> README.md
          echo "" >> README.md

          # Loop through categories and generate shields.io badges
          for cat in DATA_AND_FEATURES MODEL_DEVELOPMENT INFRASTRUCTURE_TESTING MONITORING_TESTING; do
            echo "#### ${cat^}" >> README.md
            echo "" >> README.md

            jq -r \
              --arg cat "$cat" '
              to_entries
              | map(select(.value.category == $cat))
              | .[]
              | .key + "|" + (.value.value|tostring) + "|" + (.value.message // "-")' metrics.json \
            | while IFS="|" read -r key value message; do
                # Normalize for badge
                LABEL=$(echo "$key" | sed 's/_/%20/g')
                VAL=$(echo "$value" | sed 's/ /%20/g')
                COLOR=blue  # Optional: color logic can go here

                echo "![${key}](https://img.shields.io/badge/${LABEL}-${VAL}-${COLOR}?label=${LABEL})" >> README.md
            done

            echo "" >> README.md
          done

          echo "<!-- METRICS END -->" >> README.md


      - name: Commit and push updated README
        run: |
          git add README.md
          git diff --cached --quiet || git commit -m "ci: update README with test results"
          git push
