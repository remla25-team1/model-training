name: ML Auto-Test

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths-ignore:
      - README.md

jobs:
  generate-version:
    if: github.actor != 'github-actions'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OP_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Read base version and generate tag
        id: tag
        run: |
          BASE_VERSION="v$(cat VERSION.txt)-pre"
          DATE=$(date +'%Y%m%d')
          COUNT=$(git tag --list "${BASE_VERSION}-${DATE}-*" | wc -l)
          NEW_TAG="${BASE_VERSION}-${DATE}-$(printf "%03d" $((COUNT + 1)))"
          echo "Generated tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag ${{ steps.tag.outputs.new_tag }}
          git push origin ${{ steps.tag.outputs.new_tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage pytest flake8 isort black pylint

      - name: Run format
        run: make format

      - name: Run lint
        run: make lint

      - name: Download NLTK data
        run: |
          python -m nltk.downloader stopwords wordnet omw-1.4

      - name: Download dataset
        run: python -m model_training.dataset

      - name: Run tests with coverage (detailed output)
        run: |
          echo "Running unit tests..."
          coverage run --rcfile=.coveragerc -m pytest -v --tb=short --durations=10 tests | tee test_output.txt

          echo "Running metamorphic robustness test..."
          coverage run --rcfile=.coveragerc --append tests/metamorphic_test.py \
            --input data/processed/a1_RestaurantReviews_HistoricDump.tsv \
            --model-version test_model_dev \
            | tee metamorphic_output.txt

          coverage report --rcfile=.coveragerc -m > coverage.txt

      - name: Show coverage summary
        run: coverage report --rcfile=.coveragerc -m

      - name: Extract test adequacy info and update README
        run: |
          # Unit‐test prints
          DATA_QUALITY=$(grep '^\[Data Quality\]' test_output.txt | awk -F'] ' '{print $2}')
          SPARSITY=$(grep '^\[Sparsity\]' test_output.txt | awk '{print $NF}')
          LATENCY=$(grep '^\[Latency\]' test_output.txt | awk '{print $NF}')

          # Metamorphic prints
          META_CONSISTENCY=$(grep 'Consistency Rate:' metamorphic_output.txt | awk '{print $NF}')
          META_PRESERVATION=$(grep 'Label Preservation Rate:' metamorphic_output.txt | awk '{print $NF}')
          META_FLIPPING=$(grep 'Flipping Rate:' metamorphic_output.txt | awk '{print $NF}')
          META_DELTA_ACC=$(grep 'Accuracy Drop' metamorphic_output.txt | awk '{print $NF}')

          COVERAGE=$(tail -n1 coverage.txt | awk '{print $4}')

          # Update README
          sed -i "s|<!-- COVERAGE -->.*|<!-- COVERAGE --> Coverage: ${COVERAGE}|" README.md
          sed -i '/<!-- ADEQUACY START -->/,/<!-- ADEQUACY END -->/d' README.md
          cat <<EOF >> README.md
          <!-- ADEQUACY START -->
          - Data Quality: ${DATA_QUALITY}  
          - Sparsity: ${SPARSITY}  
          - Latency: ${LATENCY}  
          
          **Metamorphic Robustness**  
          - Consistency Rate: ${META_CONSISTENCY}  
          - Label Preservation Rate: ${META_PRESERVATION}  
          - Flipping Rate: ${META_FLIPPING}  
          - Accuracy Drop (Δ acc): ${META_DELTA_ACC}
          <!-- ADEQUACY END -->
          EOF

      - name: Commit and push updated README
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git diff --quiet README.md || (git add README.md && git commit -m "Update README with test results" && git push)
