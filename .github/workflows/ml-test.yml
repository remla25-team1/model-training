name: ML Auto-Test

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths-ignore:
      - README.md

jobs:
  run_tests:
    if: github.actor != 'github-actions'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OP_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage pytest flake8 isort black pylint

      - name: Run format
        run: make format

      - name: Run lint
        run: make lint

      - name: Download NLTK data
        run: |
          python -m nltk.downloader stopwords wordnet omw-1.4

      - name: Download dataset
        run: python -m model_training.dataset

      - name: Run tests with coverage (detailed output)
        run: |
          echo "Running unit tests..."
          export PYTHONPATH=$(pwd):$PYTHONPATH
          coverage run --rcfile=.coveragerc -m pytest -v --tb=short --durations=10 tests | tee test_output.txt

          echo "Running metamorphic robustness test..."
          coverage run --rcfile=.coveragerc --append tests/test_metamorphic.py \
            --input data/processed/a1_RestaurantReviews_HistoricDump.tsv \
            --model-version test_model_dev \
            | tee metamorphic_output.txt

          coverage report --rcfile=.coveragerc -m > coverage.txt
      
      - name: Debug check for metrics.json
        run: |
          echo "Current directory: $(pwd)"
          ls -lah
          cat $GITHUB_WORKSPACE/metrics.json || echo "metrics.json not found!"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract and update coverage badge below title
        run: |
          COVERAGE=$(tail -n1 coverage.txt | awk '{print $NF}')
          echo "Coverage: ${COVERAGE}"

          COVERAGE_VALUE=$(echo $COVERAGE | tr -d '%')
          if [ "$COVERAGE_VALUE" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$COVERAGE_VALUE" -ge 75 ]; then
            COLOR="yellow"
          else
            COLOR="red"
          fi

          BADGE="![coverage](https://img.shields.io/badge/coverage-${COVERAGE//%/%25}-$COLOR)"

          # If a coverage badge already exists, replace it; else insert after title
          if grep -q '!\[coverage\](https://img.shields.io/badge/coverage-' README.md; then
            sed -i "s|!\[coverage\](https://img.shields.io/badge/coverage-[^)]*)|$BADGE|" README.md
          else
            # Insert badge below first non-empty line (usually the title)
            awk -v badge="$BADGE" '
              NR==1 {print; print ""; print badge; next}
              {print}
            ' README.md > README_tmp.md && mv README_tmp.md README.md
          fi

      - name: Show coverage summary and update README
        run: |
          # Get coverage summary text
          coverage report --rcfile=.coveragerc -m > coverage_summary.txt

          # Define markers
          START_MARKER="<!-- COVERAGE_SUMMARY_START -->"
          END_MARKER="<!-- COVERAGE_SUMMARY_END -->"

          # Remove old summary block
          sed -i "/$START_MARKER/,/$END_MARKER/d" README.md

          # Prepare table header
          {
            echo ""
            echo "$START_MARKER"
            echo ""
            echo "| File | Statements | Miss | Coverage | Missing Lines |"
            echo "|------|------------|------|----------|----------------|"

            # Skip first 2 lines (header and separator), and last line (summary)
            tail -n +3 coverage_summary.txt | sed '$d' | while read -r line; do
              FILE=$(echo "$line" | awk '{print $1}')
              STMT=$(echo "$line" | awk '{print $2}')
              MISS=$(echo "$line" | awk '{print $3}')
              COV=$(echo "$line" | awk '{print $4}')
              MISS_LNS=$(echo "$line" | cut -d' ' -f5-)
              echo "| $FILE | $STMT | $MISS | $COV | $MISS_LNS |"
            done

            echo "$END_MARKER"
          } >> README.md



      - name: Extract test adequacy info and update README
        run: |
          # Remove old section
          sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/d' README.md

          echo "<!-- METRICS START -->" >> README.md
          echo "" >> README.md

          # Group by category
          for cat in DATA_AND_FEATURES MODEL_DEVELOPMENT INFRASTRUCTURE_TESTING MONITORING_TESTING; do
            echo "#### ${cat^}" >> README.md
            echo "" >> README.md
            echo "| Metric | Value | Notes |" >> README.md
            echo "|--------|-------|---------|" >> README.md
            jq -r \
              --arg cat "$cat" \
              '. as $root | to_entries
               | map(select(.value.category == $cat))
               | .[] 
               | "| \(.key) | \(.value.value) | \(.value.message // "-") |"' \
               metrics.json >> README.md
            echo "" >> README.md
          done

          echo "<!-- METRICS END -->" >> README.md

      - name: Commit and push updated README
        run: |
          git add README.md
          git diff --cached --quiet || git commit -m "ci: update README with test results"
          git push
