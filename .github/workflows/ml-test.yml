name: ML Auto-Test

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths-ignore:
      - README.md

jobs:
  generate-version:
    if: github.actor != 'github-actions'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OP_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Read base version and generate tag
        id: tag
        run: |
          BASE_VERSION="v$(cat VERSION.txt)-pre"
          DATE=$(date +'%Y%m%d')
          COUNT=$(git tag --list "${BASE_VERSION}-${DATE}-*" | wc -l)
          NEW_TAG="${BASE_VERSION}-${DATE}-$(printf "%03d" $((COUNT + 1)))"
          echo "Generated tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag ${{ steps.tag.outputs.new_tag }}
          git push origin ${{ steps.tag.outputs.new_tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage pytest flake8 isort black pylint

      - name: Run format
        run: make format

      - name: Run lint
        run: make lint

      - name: Download NLTK data
        run: |
          python -m nltk.downloader stopwords wordnet omw-1.4

      - name: Download dataset
        run: python -m model_training.dataset
        
      - name: Prepare metrics file
        run: echo '{}' > metrics.json

      - name: DEBUG List test directory
        run: ls -R tests

      - name: Run tests with coverage (detailed output)
        run: |
          echo "Running unit tests..."
          export PYTHONPATH=$(pwd):$PYTHONPATH
          coverage run --rcfile=.coveragerc -m pytest -v --tb=short --durations=10 tests | tee test_output.txt

          echo "Running metamorphic robustness test..."
          coverage run --rcfile=.coveragerc --append tests/test_metamorphic.py \
            --input data/processed/a1_RestaurantReviews_HistoricDump.tsv \
            --model-version test_model_dev \
            | tee metamorphic_output.txt

          coverage report --rcfile=.coveragerc -m > coverage.txt

      - name: Show coverage summary
        run: coverage report --rcfile=.coveragerc -m

      - name: Re-checkout current branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OP_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.ref }}
          persist-credentials: true

      - name: Debug check for metrics.json
        run: |
          echo "Current directory: $(pwd)"
          ls -lah
          cat metrics.json || echo "metrics.json not found!"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
    
      - name: Extract test adequacy info and update README
        run: |
          # Remove old section
          sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/d' README.md

          echo "<!-- METRICS START -->" >> README.md
          echo "##Test Summary" >> README.md
          echo "" >> README.md

          # Group by category
          for cat in data feature model metamorphic; do
            echo "### ${cat^} Tests" >> README.md
            echo "" >> README.md
            echo "| Metric | Value | Message |" >> README.md
            echo "|--------|-------|---------|" >> README.md
            jq -r \
              --arg cat "$cat" \
              '. as $root | to_entries
               | map(select(.value.category == $cat))
               | .[] 
               | "| \(.key) | \(.value.value) | \(.value.message // "-") |"' \
              metrics.json >> README.md
            echo "" >> README.md
          done

          echo "<!-- METRICS END -->" >> README.md

      - name: Commit and push updated README
        run: |
          git add README.md
          git diff --cached --quiet || git commit -m "ci: update README with test results"
          git push
